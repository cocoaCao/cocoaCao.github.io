[{"title":"Dart入门","url":"http://yoursite.com/2019/04/15/Dart入门/","content":"<h1 id=\"Dart入门\"><a href=\"#Dart入门\" class=\"headerlink\" title=\"Dart入门\"></a>Dart入门</h1><h2 id=\"第一章-Dart概述\"><a href=\"#第一章-Dart概述\" class=\"headerlink\" title=\"第一章 Dart概述\"></a>第一章 Dart概述</h2><h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><ul>\n<li>Dart是谷歌发布的一门开源编程语言</li>\n<li>Dart初期目标是成为下一代的web开发语言</li>\n<li>Dart目前已可用于全平台开发</li>\n<li>是一门面向对象的编程语言</li>\n</ul>\n<h3 id=\"1-2-应用场景\"><a href=\"#1-2-应用场景\" class=\"headerlink\" title=\"1.2 应用场景\"></a>1.2 应用场景</h3><ul>\n<li>Web开发</li>\n<li>跨平台移动应用开发（Flutter）</li>\n<li>脚本或服务端开发</li>\n</ul>\n<h2 id=\"第二章-数据类型\"><a href=\"#第二章-数据类型\" class=\"headerlink\" title=\"第二章 数据类型\"></a>第二章 数据类型</h2><h3 id=\"2-1-变量与常量\"><a href=\"#2-1-变量与常量\" class=\"headerlink\" title=\"2.1 变量与常量\"></a>2.1 变量与常量</h3><h4 id=\"1、变量\"><a href=\"#1、变量\" class=\"headerlink\" title=\"1、变量\"></a>1、变量</h4><ul>\n<li>使用var声明变量，可赋予不同类型的值，未初始化时，默认值为null</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var a; //此时print(a);输出为null</div><div class=\"line\">a = 10;</div><div class=\"line\">a = &quot;Hello Word!&quot;;</div><div class=\"line\">\t</div><div class=\"line\">var b = 20;//可以在声明的时候赋值</div></pre></td></tr></table></figure>\n<ul>\n<li>使用final声明一个只能赋值一次的变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">final c = 30;</div><div class=\"line\">c = 50; //c只能赋值一次，此处编译器会报错</div></pre></td></tr></table></figure>\n<h4 id=\"2、常量\"><a href=\"#2、常量\" class=\"headerlink\" title=\"2、常量\"></a>2、常量</h4><ul>\n<li>使用const声明常量，且声明的是编译时的常量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">const d = 20;</div><div class=\"line\">d = 50; //常量的值不能被修改，所以此处会报错</div></pre></td></tr></table></figure>\n<h3 id=\"2-2-数据类型\"><a href=\"#2-2-数据类型\" class=\"headerlink\" title=\"2.2 数据类型\"></a>2.2 数据类型</h3><ul>\n<li>数值型-Number</li>\n<li>字符串-String</li>\n<li>布尔型-Boolean</li>\n<li>列表-List</li>\n<li>键值对-Map</li>\n<li>Runer, Symbols(非常用)</li>\n</ul>\n<h4 id=\"1、数值型\"><a href=\"#1、数值型\" class=\"headerlink\" title=\"1、数值型\"></a>1、数值型</h4><ul>\n<li>可以使用num表示（或整型可以使用int，浮点型使用double，它们都是Dart的子类）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">num a = 10;</div><div class=\"line\">a = 12.5;</div><div class=\"line\">\t</div><div class=\"line\">int b = 20;</div><div class=\"line\">b = 20.5; //此处报错，浮点型不能赋值给int类型的变量</div><div class=\"line\">\t</div><div class=\"line\">double c = 12.3;</div><div class=\"line\">c = 10; //此处报错，整型不能赋值给double类型的变量</div></pre></td></tr></table></figure>\n<ul>\n<li>数值型操作</li>\n</ul>\n<p>运算符： +、-、*、/、~/、%</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int b = 20;</div><div class=\"line\">double c = 12.3;</div><div class=\"line\">print(b + c);</div><div class=\"line\">print(b - c);</div><div class=\"line\">print(b * c);</div><div class=\"line\">print(b / c);</div><div class=\"line\">print(b ~/ c);</div><div class=\"line\">print(b % c);</div><div class=\"line\">注：/表示÷，~/表示÷并取整</div></pre></td></tr></table></figure>\n<p>常用属性：isNaN、isEven、isOdd等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">print(0.0 / 0.0); //0.0/0.0是非数字，可以使用isNaN判断</div><div class=\"line\">int b = 20;</div><div class=\"line\">\t</div><div class=\"line\">print(b.isEven());</div><div class=\"line\">print(c.isOdd());</div></pre></td></tr></table></figure>\n<p>常用方法：abs()、round()、floor()、ceil()、toInt()、toDouble()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int e = -100;</div><div class=\"line\">print(e.abs());</div><div class=\"line\"></div><div class=\"line\">double f = 10.5;</div><div class=\"line\">print(f.round()); //四舍五入</div><div class=\"line\">print(f.floor()); //不大于f的最大整数</div><div class=\"line\">print(f.ceil()); //不小于f的最小整数</div><div class=\"line\">print(f.toInt()); //转int</div><div class=\"line\">\t</div><div class=\"line\">int b = 20;</div><div class=\"line\">print(b.toDouble());//转Double</div></pre></td></tr></table></figure>\n<p>####2、字符串（String）</p>\n<ul>\n<li>创建字符串</li>\n</ul>\n<p>使用引号或者双引号创建字符串，使用三个引号(或双引号)创建件多行字符创，使用r创建原始raw字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">String str1 = &apos;Hello&apos;; //或使用“”</div><div class=\"line\">String str2 =  &apos;&apos;&apos;Hello</div><div class=\"line\">                 Word &apos;&apos;&apos;; //或使用“”“ ”“”</div><div class=\"line\">String str3 = r&apos;Hello \\n World&apos;; </div><div class=\"line\">print(str3); //输出为Hello \\n World</div></pre></td></tr></table></figure>\n<ul>\n<li>字符串的操作</li>\n</ul>\n<p>运算符：+、*、==、[]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">String str = &quot;This is My favorite luanguage&quot;;</div><div class=\"line\">print(str + &quot;New&quot;);</div><div class=\"line\">print(str * 5);</div><div class=\"line\">String str1 = &quot;d&quot;;</div><div class=\"line\">print(str == str1);</div><div class=\"line\">print(str[1]);</div></pre></td></tr></table></figure>\n<p>插值表达式：&amp;{expression}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int a = 1;</div><div class=\"line\">int b = 2;</div><div class=\"line\">print(&apos;a + b = $&#123;a + b&#125;&apos;);</div><div class=\"line\">print(&apos;a = $a&apos;);</div></pre></td></tr></table></figure>\n<p>常用属性：length、 isEmpty、isNotEmpty</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">String str = &quot;This is My favorite luanguage&quot;;</div><div class=\"line\">print(str.length);</div><div class=\"line\">print(str.isEmpty);</div><div class=\"line\">print(str.isNotEmpty);</div></pre></td></tr></table></figure>\n<p>常用方法：contains()、subString()、startsWith()、endsWith()、indexOf()、lastIndexOf()、toLowerCase()、toUpperCase()、trim()、trimLeft()、trimRight()、split()、replaceXXX()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">String str = &quot;This is My favorite luanguage&quot;;</div><div class=\"line\">print(str.contains(&quot;This&quot;));</div><div class=\"line\">print(str.substring(0,3));</div><div class=\"line\">print(str.startsWith(&quot;a&quot;));</div><div class=\"line\">print(str.endsWith(&quot;ge&quot;));</div><div class=\"line\">\t</div><div class=\"line\">var list = str.split(&quot; &quot;);</div><div class=\"line\">print(list);</div><div class=\"line\">\t</div><div class=\"line\">print(str.replaceAll(&quot;This&quot;, &quot;That&quot;));</div></pre></td></tr></table></figure>\n<h4 id=\"3、布尔型\"><a href=\"#3、布尔型\" class=\"headerlink\" title=\"3、布尔型\"></a>3、布尔型</h4><p>使用bool表示布尔类型，布尔值只有true和false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">bool isTrue = true;</div><div class=\"line\">bool isFalse = false;</div><div class=\"line\">\t</div><div class=\"line\">print(&quot;Hello&quot;.isEmpty);</div></pre></td></tr></table></figure>\n<h4 id=\"4、列表（List）\"><a href=\"#4、列表（List）\" class=\"headerlink\" title=\"4、列表（List）\"></a>4、列表（List）</h4><ul>\n<li><p>List(数组)创建</p>\n<p>  创建List : Var list = [1, 2, 3];<br><br>  创建不可变的List : var list = const [1, 2, 3];<br><br>  构造创建 var list = new List();</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var list1 = [1, 2, 3, &quot;Dart&quot;, true];</div><div class=\"line\">print(list1);</div><div class=\"line\">print(list1[2]);</div><div class=\"line\">list1[1] = &quot;Hello&quot;;</div><div class=\"line\">print(list1);</div><div class=\"line\">\t</div><div class=\"line\">var list2 = const [1,2,3];</div><div class=\"line\">//  list2[0] = 5;</div><div class=\"line\">\t</div><div class=\"line\">var list3 = new List();</div></pre></td></tr></table></figure>\n<ul>\n<li>常用操作：[]、length、add()、insert()、remove()、clear()、indexOf()、lastIndexOf()、sort()、sublist()、shuffle()、asMap()、forEach()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var list = [&quot;hello&quot;,&quot;dart&quot;];</div><div class=\"line\">print(list.length);</div><div class=\"line\">list.add(&quot;New&quot;);</div><div class=\"line\">print(list);</div><div class=\"line\">\t</div><div class=\"line\">list.insert(1, &quot;Java&quot;);</div><div class=\"line\">print(list);</div><div class=\"line\">\t</div><div class=\"line\">list.remove(&quot;Java&quot;);</div><div class=\"line\">print(list);</div><div class=\"line\">\t</div><div class=\"line\">//  list.clear();</div><div class=\"line\">//  print(list);</div><div class=\"line\">\t</div><div class=\"line\">print(list.indexOf(&quot;dart1&quot;));</div><div class=\"line\">list.sort();</div><div class=\"line\">print(list);</div><div class=\"line\">\t</div><div class=\"line\">print(list.sublist(1));</div><div class=\"line\">\t</div><div class=\"line\">list.forEach(print);</div></pre></td></tr></table></figure>\n<h4 id=\"5、Map\"><a href=\"#5、Map\" class=\"headerlink\" title=\"5、Map\"></a>5、Map</h4><ul>\n<li>Map创建</li>\n</ul>\n<p>创建Map: var language = {‘first’ : ‘Dart’, ‘Second’ : ‘Java’};</p>\n<p>创建不可变Map: var language = const {‘first’ : ‘Dart’, ‘Second’ : ‘Java’};</p>\n<p>构造创建： var language =  new Map();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var map1 = &#123;&quot;first&quot;:&quot;Dart&quot;,1:true,true:&quot;2&quot;&#125;;</div><div class=\"line\">print(map1);</div><div class=\"line\">\t</div><div class=\"line\">print(map1[&quot;first&quot;]);</div><div class=\"line\">print(map1[true]);</div><div class=\"line\">map1[1] = false;</div><div class=\"line\">print(map1);</div><div class=\"line\">\t</div><div class=\"line\">var map2 = const &#123;1:&quot;Dart&quot;,2:&quot;Java&quot;&#125;;</div><div class=\"line\">//  map2[1] = &quot;Python&quot;;</div><div class=\"line\">\t</div><div class=\"line\">var map3 = new Map();</div></pre></td></tr></table></figure>\n<ul>\n<li>常用操作<br>[]、length、isEmpty()、isNotEmpoty()、keys、valuse、containsKey()、containsValue()、remove()、forEach()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var map = &#123;&quot;first&quot;:&quot;Dart&quot;,&quot;second&quot;:&quot;Java&quot;,&quot;third&quot;:&quot;Python&quot;&#125;;</div><div class=\"line\">print(map.length);</div><div class=\"line\">//  map.isEmpty;</div><div class=\"line\">\t</div><div class=\"line\">print(map.keys);</div><div class=\"line\">print(map.values);</div><div class=\"line\">\t</div><div class=\"line\">print(map.containsKey(&quot;first&quot;));</div><div class=\"line\">print(map.containsValue(&quot;C&quot;));</div><div class=\"line\">\t</div><div class=\"line\">map.remove(&quot;third&quot;);</div><div class=\"line\">print(map);</div><div class=\"line\">\t</div><div class=\"line\">map.forEach(f);</div><div class=\"line\">\t</div><div class=\"line\">var list = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;];</div><div class=\"line\"> \t  print(list.asMap());</div><div class=\"line\">&#125;</div><div class=\"line\">\t</div><div class=\"line\">void f(key, value)&#123;</div><div class=\"line\"> print(&quot;key=$key,value=$value&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6、dynamic\"><a href=\"#6、dynamic\" class=\"headerlink\" title=\"6、dynamic\"></a>6、dynamic</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var a;</div><div class=\"line\">a = 10;</div><div class=\"line\">a = &quot;Dart&quot;;</div><div class=\"line\"></div><div class=\"line\">dynamic b = 20;</div><div class=\"line\">b = &quot;JavaScript&quot;;</div><div class=\"line\"></div><div class=\"line\">var list = new List&lt;dynamic&gt;();</div><div class=\"line\">list.add(1);</div><div class=\"line\">list.add(&quot;hello&quot;);</div><div class=\"line\">list.add(true);</div><div class=\"line\">print(list);</div></pre></td></tr></table></figure>\n<h2 id=\"第三章-运算符\"><a href=\"#第三章-运算符\" class=\"headerlink\" title=\"第三章 运算符\"></a>第三章 运算符</h2><h3 id=\"3-1-算术运算符\"><a href=\"#3-1-算术运算符\" class=\"headerlink\" title=\"3.1 算术运算符\"></a>3.1 算术运算符</h3><ul>\n<li>加减乘除：+, -, *, /, ~/, %</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int a = 10;</div><div class=\"line\">int b = 2;</div><div class=\"line\">\t</div><div class=\"line\">print(a + b);</div><div class=\"line\">print(a - b);</div><div class=\"line\">print(a * b);</div><div class=\"line\">print(a / b);</div><div class=\"line\">print(a ~/ b);</div><div class=\"line\">print(a % b);</div></pre></td></tr></table></figure>\n<ul>\n<li>递增递减: ++var, var++, –var, var–</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int a = 10;</div><div class=\"line\">int b = 2;</div><div class=\"line\">\t</div><div class=\"line\">print(a++);//11</div><div class=\"line\">print(++a);//12</div><div class=\"line\">\t</div><div class=\"line\">print(a--);//11</div><div class=\"line\">print(--a);//10</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-关系运算符\"><a href=\"#3-2-关系运算符\" class=\"headerlink\" title=\"3.2 关系运算符\"></a>3.2 关系运算符</h3><ul>\n<li>运算符：==, !=, &gt;, &lt;, &gt;=, &lt;=</li>\n<li>判断内容是否相同使用==</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int a = 5;</div><div class=\"line\">int b = 3;</div><div class=\"line\"></div><div class=\"line\">print(a == b);</div><div class=\"line\">print(a !=b );</div><div class=\"line\">print(a &gt; b);</div><div class=\"line\">print(a &lt; b);</div><div class=\"line\">print(a &gt;= b);</div><div class=\"line\">print(a &lt;= b);</div><div class=\"line\"></div><div class=\"line\">String strA = &quot;123&quot;;</div><div class=\"line\">String strB = &quot;123&quot;;</div><div class=\"line\">print(strA == strB);</div></pre></td></tr></table></figure>\n<h3 id=\"3-3-逻辑运算符\"><a href=\"#3-3-逻辑运算符\" class=\"headerlink\" title=\"3.3 逻辑运算符\"></a>3.3 逻辑运算符</h3><ul>\n<li>运算符：!、&amp;&amp;、||</li>\n<li>针对布尔类型运算</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">bool isTrue = true;</div><div class=\"line\">print(!isTrue);</div><div class=\"line\"></div><div class=\"line\">bool isFalse = false;</div><div class=\"line\">print(isTrue &amp;&amp; isFalse);</div><div class=\"line\">print(isTrue || isFalse);</div><div class=\"line\"></div><div class=\"line\">String str = &quot;&quot;;</div><div class=\"line\">print(!str.isEmpty);</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-赋值运算符\"><a href=\"#3-4-赋值运算符\" class=\"headerlink\" title=\"3.4 赋值运算符\"></a>3.4 赋值运算符</h3><ul>\n<li>基础运算符：=、?:=、??=</li>\n<li>符合运算符: +=、-=、*=、/=、%=、~/=</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">  int a = 10;</div><div class=\"line\">  int b = 5;</div><div class=\"line\"></div><div class=\"line\">  b ??= 10;</div><div class=\"line\">  print(b);</div><div class=\"line\"></div><div class=\"line\">  a += 2;</div><div class=\"line\">  print(a);</div><div class=\"line\"></div><div class=\"line\">  a -= b;</div><div class=\"line\">  print(a);</div><div class=\"line\"></div><div class=\"line\">  a *= b;</div><div class=\"line\">//  a /= b;</div><div class=\"line\">  a ~/= b;</div><div class=\"line\">  a %= b;</div></pre></td></tr></table></figure>\n<h3 id=\"3-5-条件表达式\"><a href=\"#3-5-条件表达式\" class=\"headerlink\" title=\"3.5 条件表达式\"></a>3.5 条件表达式</h3><ul>\n<li>三目运算符：condition ? expr1: expr2</li>\n<li>??运算符：expr1 ?? expr2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int gender = 1;</div><div class=\"line\">String str = gender == 0 ? &quot;Male=$gender&quot; :&quot;Female=$gender&quot;;</div><div class=\"line\">print(str);</div><div class=\"line\"></div><div class=\"line\">String a = &quot;Dart&quot;;</div><div class=\"line\">String b = &quot;Java&quot;;</div><div class=\"line\">String c = a ?? b;</div><div class=\"line\">print(c);</div></pre></td></tr></table></figure>\n<h2 id=\"第四章-控制流语句\"><a href=\"#第四章-控制流语句\" class=\"headerlink\" title=\"第四章 控制流语句\"></a>第四章 控制流语句</h2><h3 id=\"4-1-条件语句\"><a href=\"#4-1-条件语句\" class=\"headerlink\" title=\"4.1 条件语句\"></a>4.1 条件语句</h3><ul>\n<li>if语句</li>\n<li>if…else if语句</li>\n<li>if…else if…else语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int score = 100;</div><div class=\"line\"></div><div class=\"line\">if(score &gt;= 90)&#123;</div><div class=\"line\">  if(score == 100)&#123;</div><div class=\"line\">    print(&quot;完美&quot;);</div><div class=\"line\">  &#125;else &#123;</div><div class=\"line\">    print(&quot;优秀&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;else if(score &gt; 60)&#123;</div><div class=\"line\">  print(&quot;良好&quot;);</div><div class=\"line\">&#125;else if(score == 60)&#123;</div><div class=\"line\">  print(&quot;及格&quot;);</div><div class=\"line\">&#125;else &#123;</div><div class=\"line\">  print(&quot;不及格&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-2-循环语句\"><a href=\"#4-2-循环语句\" class=\"headerlink\" title=\"4.2 循环语句\"></a>4.2 循环语句</h3><ul>\n<li>for循环</li>\n<li>for…in</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var list = [1,2,3,4,5];</div><div class=\"line\"></div><div class=\"line\">for(var index = 0;index &lt; list.length;index++)&#123;</div><div class=\"line\">  print(list[index]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">print(&quot;---------&quot;);</div><div class=\"line\">for(var item in list)&#123;</div><div class=\"line\">  print(item);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>while循环</li>\n<li>do…while循环</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int count = 0;</div><div class=\"line\"></div><div class=\"line\">while(count &lt; 5)&#123;</div><div class=\"line\">  print(count++);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">print(&quot;---$count----&quot;);</div><div class=\"line\"></div><div class=\"line\">do&#123;</div><div class=\"line\">  print(count--);</div><div class=\"line\">&#125;while(count &gt; 0 &amp;&amp; count &lt; 5);</div></pre></td></tr></table></figure>\n<h3 id=\"4-3-break-和continue\"><a href=\"#4-3-break-和continue\" class=\"headerlink\" title=\"4.3 break 和continue\"></a>4.3 break 和continue</h3><ul>\n<li>终止循环</li>\n<li>跳出当前循环</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">  var list = [1,2,3];</div><div class=\"line\">  for(var item in list)&#123;</div><div class=\"line\">    if(item == 2) &#123;</div><div class=\"line\">//      break;</div><div class=\"line\">      continue;</div><div class=\"line\">    &#125;</div><div class=\"line\">    print(item);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  print(&quot;-----&quot;);</div><div class=\"line\">  var list2 = [4,5,6];</div><div class=\"line\">  for(var item1 in list)&#123;</div><div class=\"line\">    if(item1 == 2)&#123;</div><div class=\"line\">      break;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    for(var item2 in list2)&#123;</div><div class=\"line\">      if(item2 == 5)&#123;</div><div class=\"line\">        break;</div><div class=\"line\">      &#125;</div><div class=\"line\">      print(item2);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-4-switch…case选择语句\"><a href=\"#4-4-switch…case选择语句\" class=\"headerlink\" title=\"4.4 switch…case选择语句\"></a>4.4 switch…case选择语句</h3><ul>\n<li>比较类型：num、String、编译期常量、对象、枚举</li>\n<li>非空case必须有一个break</li>\n<li>default 处理默认情况</li>\n<li>continue跳转标签</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">String language = &quot;Java&quot;;</div><div class=\"line\"></div><div class=\"line\">  switch(language)&#123;</div><div class=\"line\">    case &quot;Dart&quot;:</div><div class=\"line\">      print(&quot;Dart is my favorite&quot;);</div><div class=\"line\">      break;</div><div class=\"line\">    case &quot;Java&quot;:</div><div class=\"line\">      print(&quot;Java is my favorite&quot;);</div><div class=\"line\">      break;</div><div class=\"line\">    case &quot;Python&quot;:</div><div class=\"line\">      print(&quot;Python is my favorite&quot;);</div><div class=\"line\">      break;</div><div class=\"line\">    default:</div><div class=\"line\">      print(&quot;None&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  switch(language)&#123;</div><div class=\"line\">    Test:</div><div class=\"line\">    case &quot;Dart&quot;:</div><div class=\"line\">      print(&quot;Dart is my favorite&quot;);</div><div class=\"line\">      break;</div><div class=\"line\">    case &quot;Java&quot;:</div><div class=\"line\">      print(&quot;Java is my favorite&quot;);</div><div class=\"line\">      continue Test;</div><div class=\"line\">//      break;</div><div class=\"line\">    case &quot;Python&quot;:</div><div class=\"line\">      print(&quot;Python is my favorite&quot;);</div><div class=\"line\">      break;</div><div class=\"line\">    default:</div><div class=\"line\">      print(&quot;None&quot;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"第五章-Function\"><a href=\"#第五章-Function\" class=\"headerlink\" title=\"第五章 Function\"></a>第五章 Function</h2><h3 id=\"5-1-方法定义\"><a href=\"#5-1-方法定义\" class=\"headerlink\" title=\"5.1 方法定义\"></a>5.1 方法定义</h3><ul>\n<li>声明与使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">返回类型 方法名（参数1， 参数2，...）&#123;</div><div class=\"line\"> 方法体</div><div class=\"line\"> return 返回值</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main(List args)&#123;</div><div class=\"line\">  print(args);</div><div class=\"line\">  print(getPerson(&quot;张三&quot;, 18));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">String getPerson(name,age)&#123;</div><div class=\"line\">  return &quot;name=$name,age=$age&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>方法特性</p>\n<p>  方法也是对象，并且有具体类型Function<br><br>  返回值类型、参数都可省略<br><br>  箭头语法：=&gt;expr 是{return expr;}缩写。只适用于一个表达式。<br><br>  方法都有返回值。如果没有指定，默认return null最后一句执行</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main(List args)&#123;</div><div class=\"line\">  print(args);</div><div class=\"line\">  print(getPerson(&quot;张三&quot;, 18));</div><div class=\"line\">  print(printPerson(&quot;李四&quot;, 20));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int gender = 1;</div><div class=\"line\">getPerson(name,age) =&gt; gender == 1 ? &quot;name=$name,age=$age&quot;:&quot;Test&quot;;</div><div class=\"line\"></div><div class=\"line\">printPerson(name,age)&#123;</div><div class=\"line\">  print(&quot;name=$name,age=$age&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-2-可选参数\"><a href=\"#5-2-可选参数\" class=\"headerlink\" title=\"5.2 可选参数\"></a>5.2 可选参数</h3><ul>\n<li>可选参数命名：{param1, param2,…}，有些参数可以省略，调用时根据名称传参数。</li>\n<li>可选位置参数：[param1, param2,…]，按先后顺序传参</li>\n<li>如果存在具体参数，可选擦书声明必须在参数后面</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main()&#123;</div><div class=\"line\"></div><div class=\"line\">  printPerson(&quot;李四&quot;);</div><div class=\"line\">  printPerson(&quot;李四&quot;,age: 20);</div><div class=\"line\">  printPerson(&quot;李四&quot;,age: 20,gender: &quot;Male&quot;);</div><div class=\"line\">  printPerson(&quot;李四&quot;,gender: &quot;Male&quot;);</div><div class=\"line\"></div><div class=\"line\">  printPerson2(&quot;张三&quot;);</div><div class=\"line\">  printPerson2(&quot;张三&quot;,18);</div><div class=\"line\">  printPerson2(&quot;张三&quot;,18,&quot;Female&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printPerson(String name,&#123;int age,String gender&#125;)&#123;</div><div class=\"line\">  print(&quot;name=$name,age=$age,gender=$gender&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printPerson2(String name,[int age,String gender])&#123;</div><div class=\"line\">  print(&quot;name=$name,age=$age,gender=$gender&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-3-默认参数值\"><a href=\"#5-3-默认参数值\" class=\"headerlink\" title=\"5.3 默认参数值\"></a>5.3 默认参数值</h3><ul>\n<li>使用 = 在可选参数指定默认值</li>\n<li>默认参数值必须是编译时常量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main()&#123;</div><div class=\"line\">  printPerson(&quot;李四&quot;);</div><div class=\"line\">  printPerson(&quot;李四&quot;,age: 20);</div><div class=\"line\">  printPerson(&quot;李四&quot;,gender: &quot;Male&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">printPerson(String name,&#123;int age = 30, String gender = &quot;Female&quot;&#125;)&#123;</div><div class=\"line\">  print(&quot;name=$name,age=$age,gender=$gender&quot;);</div></pre></td></tr></table></figure>\n<h3 id=\"5-4-方法对象\"><a href=\"#5-4-方法对象\" class=\"headerlink\" title=\"5.4 方法对象\"></a>5.4 方法对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main()&#123;</div><div class=\"line\">  Function func = printHello;</div><div class=\"line\">  func();</div><div class=\"line\"></div><div class=\"line\">  var list = [1,2,3,4];</div><div class=\"line\">  list.forEach(print);</div><div class=\"line\"></div><div class=\"line\">  var list2 = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;];</div><div class=\"line\">  print(listTimes(list2, times));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void printHello()&#123;</div><div class=\"line\">  print(&quot;Hello&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">List listTimes(List list ,String times(str))&#123;</div><div class=\"line\">  for(var index = 0;index &lt; list.length;index++)&#123;</div><div class=\"line\">    list[index] = times(list[index]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return list;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">String times(str)&#123;</div><div class=\"line\">  return str*3;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-5-匿名方法\"><a href=\"#5-5-匿名方法\" class=\"headerlink\" title=\"5.5 匿名方法\"></a>5.5 匿名方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">(参数1， 参数2) &#123;</div><div class=\"line\">\t方法体...</div><div class=\"line\">\treturn 返回值</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main()&#123;</div><div class=\"line\"></div><div class=\"line\">  var func = (str)&#123;</div><div class=\"line\">    print(&quot;Hello---$str&quot;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  func(30);</div><div class=\"line\"></div><div class=\"line\">//  (()&#123;</div><div class=\"line\">//    print(&quot;Test&quot;);</div><div class=\"line\">//  &#125;)();</div><div class=\"line\">  var list2 = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;];</div><div class=\"line\"></div><div class=\"line\">  var result = listTimes(list2, (str)&#123; return str * 3;&#125;);</div><div class=\"line\">  print(result);</div><div class=\"line\"></div><div class=\"line\">  print(listTimes2(list2));</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">List listTimes(List list, String times(str))&#123;</div><div class=\"line\">  for(var index = 0;index &lt; list.length;index++)&#123;</div><div class=\"line\">    list[index] = times(list[index]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return list;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">List listTimes2(List list )&#123;</div><div class=\"line\">  var func = (str)&#123; return str * 3;&#125;;</div><div class=\"line\"></div><div class=\"line\">  for(var index = 0;index &lt; list.length;index++)&#123;</div><div class=\"line\">    list[index] = func(list[index]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return list;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-6-闭包\"><a href=\"#5-6-闭包\" class=\"headerlink\" title=\"5.6 闭包\"></a>5.6 闭包</h3><ul>\n<li>闭包是一个方方法（对象）</li>\n<li>闭包定义在其他方法内部</li>\n<li>闭包能够访问外部方法内的局部变量，并持有其状态</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main()&#123;</div><div class=\"line\">  var func = a();</div><div class=\"line\">  func();</div><div class=\"line\">  func();</div><div class=\"line\">  func();</div><div class=\"line\">  func();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">a()&#123;</div><div class=\"line\">  int count = 0;</div><div class=\"line\"></div><div class=\"line\">//  printCount()&#123;</div><div class=\"line\">//    print(count++);</div><div class=\"line\">//  &#125;</div><div class=\"line\">//  return printCount;</div><div class=\"line\"></div><div class=\"line\">  return ()&#123;</div><div class=\"line\">    print(count++);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"第六章-类与对象\"><a href=\"#第六章-类与对象\" class=\"headerlink\" title=\"第六章 类与对象\"></a>第六章 类与对象</h2><h3 id=\"6-1-类、对象声明与使用\"><a href=\"#6-1-类、对象声明与使用\" class=\"headerlink\" title=\"6.1 类、对象声明与使用\"></a>6.1 类、对象声明与使用</h3><h4 id=\"1、声明\"><a href=\"#1、声明\" class=\"headerlink\" title=\"1、声明\"></a>1、声明</h4><ul>\n<li>使用关键字class声明一个类</li>\n<li>使用关键子new创建一个队形，new可省略</li>\n<li>所有对象都集成与Object类</li>\n</ul>\n<h4 id=\"2、属性和方法\"><a href=\"#2、属性和方法\" class=\"headerlink\" title=\"2、属性和方法\"></a>2、属性和方法</h4><ul>\n<li>属性会默认生成getter和setter方法</li>\n<li>使用final声明的属性只有getter方法</li>\n<li>属性和方法通过”.“访问</li>\n<li>方法不能重载</li>\n</ul>\n<h4 id=\"3、类和成员可见性\"><a href=\"#3、类和成员可见性\" class=\"headerlink\" title=\"3、类和成员可见性\"></a>3、类和成员可见性</h4><ul>\n<li>Dart中的可见性以library（库）为单位</li>\n<li>默认情况下，每一个Dart文件就是一个库</li>\n<li>使用_标示库的私有性</li>\n<li>使用import导入库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">//Person.dart</div><div class=\"line\"></div><div class=\"line\">class Person &#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  int age;</div><div class=\"line\"></div><div class=\"line\">  final String address = &quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">  void work()&#123;</div><div class=\"line\">    print(&quot;Name is $name,Age is $age,He is working...&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">//main.dart</div><div class=\"line\">import &apos;person.dart&apos;;</div><div class=\"line\"></div><div class=\"line\">void main() &#123;</div><div class=\"line\">    var person = new Person();</div><div class=\"line\">    person.name = &quot;Tom&quot;;</div><div class=\"line\">    person.age = 20;</div><div class=\"line\"></div><div class=\"line\">    print(person.name);</div><div class=\"line\">    print(person.address);</div><div class=\"line\"></div><div class=\"line\">    person.work();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-2-计算属性\"><a href=\"#6-2-计算属性\" class=\"headerlink\" title=\"6.2 计算属性\"></a>6.2 计算属性</h3><ul>\n<li>计算属性的值是通过计算而来的，本事不存储值</li>\n<li>计算属性赋值是通过计算转换到其他实例变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">    var rect = new Rectangle();</div><div class=\"line\">    rect.height = 20;</div><div class=\"line\">    rect.width = 10;</div><div class=\"line\"></div><div class=\"line\">    print(rect.area);</div><div class=\"line\"></div><div class=\"line\">    rect.area = 200;</div><div class=\"line\">    print(rect.width);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Rectangle&#123;</div><div class=\"line\">  num width,height;</div><div class=\"line\"></div><div class=\"line\">  num get area =&gt; width * height;</div><div class=\"line\">      set area(value)&#123;</div><div class=\"line\">        width = value / 20;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-3-构造方法\"><a href=\"#6-3-构造方法\" class=\"headerlink\" title=\"6.3 构造方法\"></a>6.3 构造方法</h3><h4 id=\"1、定义构造方法\"><a href=\"#1、定义构造方法\" class=\"headerlink\" title=\"1、定义构造方法\"></a>1、定义构造方法</h4><ul>\n<li>如果没有自定义构造方法，则会有个默认的构造方法</li>\n<li>如果存在自定义构造方法，则默认构造方法无效</li>\n<li>构造方法不能被重载</li>\n</ul>\n<h4 id=\"2、命名构造方法\"><a href=\"#2、命名构造方法\" class=\"headerlink\" title=\"2、命名构造方法\"></a>2、命名构造方法</h4><ul>\n<li>使用命名构造方法，可以实现多个构造方法</li>\n<li>使用”类名.方法“的形式实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">    var person = new Person(&quot;Tom&quot;,20,&quot;Male&quot;);</div><div class=\"line\">    new Person.withName(&quot;John&quot;);</div><div class=\"line\">    new Person.withAge(20);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Person&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  int age;</div><div class=\"line\"></div><div class=\"line\">  final String gender;</div><div class=\"line\"></div><div class=\"line\">  Person(this.name,this.age,this.gender);</div><div class=\"line\"></div><div class=\"line\">  Person.withName(String name)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Person.withAge(this.age);</div><div class=\"line\"></div><div class=\"line\">  void work()&#123;</div><div class=\"line\">    print(&quot;Work...&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-4-常量构造方法\"><a href=\"#6-4-常量构造方法\" class=\"headerlink\" title=\"6.4 常量构造方法\"></a>6.4 常量构造方法</h3><ul>\n<li>如果类是不可变状态，可以吧队形定义为编译时常量</li>\n<li>使用const声明构造方法，并且所有变量都为final</li>\n<li>使用const声明对象，可以省略</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">    const person = const Person(&quot;Tom&quot;,20,&quot;Male&quot;);</div><div class=\"line\">    const person1 = const Person.withInfo(&quot;Tom&quot;,20,&quot;Male&quot;);</div><div class=\"line\">    person.work();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Person&#123;</div><div class=\"line\">  final String name;</div><div class=\"line\">  final int age;</div><div class=\"line\"></div><div class=\"line\">  final String gender;</div><div class=\"line\"></div><div class=\"line\">  const Person(this.name,this.age,this.gender);</div><div class=\"line\">  const Person.withInfo(this.name, this.age, this.gender);</div><div class=\"line\"></div><div class=\"line\">  void work()&#123;</div><div class=\"line\">    print(&quot;Work...&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-5-工厂构造方法\"><a href=\"#6-5-工厂构造方法\" class=\"headerlink\" title=\"6.5 工厂构造方法\"></a>6.5 工厂构造方法</h3><ul>\n<li>工厂构造方法类似于设计模式中的工厂模式</li>\n<li>在构造方法前添加关键字factory实现一个工厂构造方法</li>\n<li>在工厂构造方法中可返回对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">class Logger &#123;</div><div class=\"line\">  final String name;</div><div class=\"line\"></div><div class=\"line\">  static final Map&lt;String, Logger&gt; _cache = &lt;String, Logger&gt;&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  factory Logger(String name) &#123;</div><div class=\"line\">    if (_cache.containsKey(name)) &#123;</div><div class=\"line\">      return _cache[name];</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      final logger = Logger._internal(name);</div><div class=\"line\">      _cache[name] = logger;</div><div class=\"line\">      return logger;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Logger._internal(this.name);</div><div class=\"line\"></div><div class=\"line\">  void log(String msg) &#123;</div><div class=\"line\">    print(msg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-6-初始化列表\"><a href=\"#6-6-初始化列表\" class=\"headerlink\" title=\"6.6 初始化列表\"></a>6.6 初始化列表</h3><ul>\n<li>初始化列表会在构造方法体执行之前执行</li>\n<li>使用逗号分隔初始化表达式</li>\n<li>使用初始化列表常用语设置final变量的值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">    var person = new Person(&quot;Tom&quot;, 20, &quot;Male&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Person&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  int age;</div><div class=\"line\"></div><div class=\"line\">  final String gender;</div><div class=\"line\"></div><div class=\"line\">  Person(this.name,this.age,this.gender);</div><div class=\"line\"></div><div class=\"line\">  Person.withMap(Map map): name = map[&quot;name&quot;],gender = map[&quot;gender&quot;]&#123;</div><div class=\"line\">    age = map[&quot;age&quot;];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  void work()&#123;</div><div class=\"line\">    print(&quot;Work...&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-7-静态成员\"><a href=\"#6-7-静态成员\" class=\"headerlink\" title=\"6.7 静态成员\"></a>6.7 静态成员</h3><ul>\n<li>使用关键字static关键字来实现类级别的变量和函数</li>\n<li>静态成员不能访问非静态成员，非静态成员可以访问静态成员</li>\n<li>类中的常量需要使用static const声明</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">  var page = new Page();</div><div class=\"line\"></div><div class=\"line\">  Page.scrollDown();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Page&#123;</div><div class=\"line\"></div><div class=\"line\">  static const int maxPage = 10;</div><div class=\"line\"></div><div class=\"line\">  static int currentPage = 1;</div><div class=\"line\"></div><div class=\"line\">  //下滑</div><div class=\"line\">  static void scrollDown()&#123;</div><div class=\"line\">    currentPage = 1;</div><div class=\"line\">    print(&quot;ScrollDown...&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //上滑</div><div class=\"line\">  void scrollUp()&#123;</div><div class=\"line\">    currentPage++;</div><div class=\"line\">    print(&quot;scrollUp...&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-8-对象操作符\"><a href=\"#6-8-对象操作符\" class=\"headerlink\" title=\"6.8 对象操作符\"></a>6.8 对象操作符</h3><ul>\n<li>条件成员的访问：？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">  Person person0;</div><div class=\"line\">  person0?.name;</div><div class=\"line\">  person0?.work();</div><div class=\"line\">  </div><div class=\"line\">  Person person = new Person();</div><div class=\"line\">  person?.name;</div><div class=\"line\">  person?.work();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Person&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  int age;</div><div class=\"line\"></div><div class=\"line\">  void work()&#123;</div><div class=\"line\">    print(&quot;Work...$name,$age&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>类型转换：as</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">void main() &#123;</div><div class=\"line\"></div><div class=\"line\">  var person;</div><div class=\"line\">  person = &quot;&quot;;</div><div class=\"line\">  person = new Person();</div><div class=\"line\">  (person as Person).work();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Person&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  int age;</div><div class=\"line\"></div><div class=\"line\">  void work()&#123;</div><div class=\"line\">    print(&quot;Work...$name,$age&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>是否是指定类型：is, is!</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\"></div><div class=\"line\">  var person;</div><div class=\"line\">  person = &quot;&quot;;</div><div class=\"line\">  person = new Person();</div><div class=\"line\"></div><div class=\"line\">  if (person is Person)&#123;</div><div class=\"line\">    person.work();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>级联操作: ..</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">  new Person()</div><div class=\"line\">    ..name = &quot;Tom&quot;</div><div class=\"line\">        ..age = 20</div><div class=\"line\">        ..work();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-9-对象call方法\"><a href=\"#6-9-对象call方法\" class=\"headerlink\" title=\"6.9 对象call方法\"></a>6.9 对象call方法</h3><ul>\n<li>如果类实现了call()方法，则该类的对象可以作为方法使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void main() &#123;</div><div class=\"line\">    var person = new Person();</div><div class=\"line\"></div><div class=\"line\">    print(person(&quot;Test&quot;,30));</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Person&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  int age;</div><div class=\"line\"></div><div class=\"line\">//  void work()&#123;</div><div class=\"line\">//    print(&quot;Name is $name,Age is $age&quot;);</div><div class=\"line\">//  &#125;</div><div class=\"line\"></div><div class=\"line\">  String call(String name,int age)&#123;</div><div class=\"line\">    return &quot;Name is $name,Age is $age&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第七章</p>\n","categories":["Dart","Flutter"],"tags":["Dart"]},{"title":"字符串","url":"http://yoursite.com/2018/01/01/python-str-md/","content":"<h4 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h4><p><code> b = “Hello cocoacao” </code><br>或<br><code> b = ‘hello cocoaco’</code></p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = &quot;cocoacao&quot;</div><div class=\"line\">position = &quot;帝都&quot;</div><div class=\"line\">address = &quot;海淀区中关村&quot;</div><div class=\"line\"></div><div class=\"line\">print(&quot;name：%s&quot;%name)</div><div class=\"line\">print(&quot;position： %s&quot;%position)</div><div class=\"line\">print(&quot;address: %s&quot;%address)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name: cocoacao</div><div class=\"line\">position: 帝都</div><div class=\"line\">address: 海淀区中关村</div></pre></td></tr></table></figure>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = input(&quot;请输入用户名：&quot;)</div></pre></td></tr></table></figure>\n<h4 id=\"下标和切片\"><a href=\"#下标和切片\" class=\"headerlink\" title=\"下标和切片\"></a>下标和切片</h4><p>下标<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = &quot;cocoacao&quot;</div><div class=\"line\">print(&quot;name[0] = &quot; + name[0])</div><div class=\"line\">print(&quot;name[3] = &quot; + name[3])</div><div class=\"line\">print(&quot;name[7] = &quot; + name[7])</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name[0] = c</div><div class=\"line\">name[3] = o</div><div class=\"line\">name[7] = o</div></pre></td></tr></table></figure>\n<p>倒序<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = &quot;cocoacao&quot;</div><div class=\"line\">print(&quot;name[-1] = &quot; + name[-1])</div><div class=\"line\">print(&quot;name[-5] = &quot; + name[-5])</div><div class=\"line\">print(&quot;name[-8] = &quot; + name[-8])</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name[-1] = o</div><div class=\"line\">name[-5] = o</div><div class=\"line\">name[-8] = c</div></pre></td></tr></table></figure>\n<p>切片<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">string[起始位置:结束:步长]</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = &quot;cocoacao&quot;</div><div class=\"line\">print(name[0:3]) #取下标0~2的字符</div><div class=\"line\">print(name[3:3]) #取下标3、4、5的字符</div><div class=\"line\">print(name[2:]) #取下标从2开始到最后的字符</div><div class=\"line\">print(name[1:-1]) #取下标从2开始到倒数第2个字符</div><div class=\"line\">print(name[:3]) #取下标0~2的字符</div><div class=\"line\">print(name[::2]) #取下标0、2、4、6的字符</div><div class=\"line\">print(name[1:5:2]) #取下标1、3的字符</div><div class=\"line\">print(name[::-2]) #取下标7、5、3、1的字符</div><div class=\"line\">print(name[5:1:-2]) #取下标5，3的字符</div><div class=\"line\">print(name[::-1]) #字符串倒序</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">coc</div><div class=\"line\">oac</div><div class=\"line\">coacao</div><div class=\"line\">ocoaca</div><div class=\"line\">coc</div><div class=\"line\">ccaa</div><div class=\"line\">oo</div><div class=\"line\">ocoo</div><div class=\"line\">co</div><div class=\"line\">oacaococ</div></pre></td></tr></table></figure>\n<h4 id=\"字符串常见的操作\"><a href=\"#字符串常见的操作\" class=\"headerlink\" title=\"字符串常见的操作\"></a>字符串常见的操作</h4><ol>\n<li><p>find<br> mystr.find(str, start=0, end=len(mystr))<br> 检测str中是否包含mystr，如果包含，返回开始的索引值，否则返回-1</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = &quot;cocoacao&quot;</div><div class=\"line\">print(name.find(&quot;oco&quot;))</div><div class=\"line\">print(name.find(&quot;oco&quot;,2,(len(name)-2)))</div></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">-1</div></pre></td></tr></table></figure>\n</li>\n<li><p>index<br> mystr.index(str, start=0, end=len(mystr))<br> 同find方法，只是与str不在mystr会报异常</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name = &quot;cocoacao&quot;</div><div class=\"line\">print(name.index(&quot;oco&quot;))</div><div class=\"line\">print(name.index(&quot;oco&quot;,2,(len(name)-2)))</div></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File &quot;/Users/macairwkcao/Code/Python/test.py&quot;, line 8, in &lt;module&gt;</div><div class=\"line\">print(name.index(&quot;oco&quot;,2,(len(name)-2)))</div><div class=\"line\">ValueError: substring not found</div></pre></td></tr></table></figure>\n</li>\n<li><p>count<br> mystr.count(str, start=0, end=len(mystr))<br> 返回str在start和end</p>\n</li>\n<li>replace</li>\n<li>split</li>\n<li>capitalize</li>\n<li>title</li>\n<li>startswith</li>\n<li>endswith</li>\n<li>lower</li>\n<li>upper</li>\n<li>ljust</li>\n<li>rjust</li>\n<li>center</li>\n<li>lstrip</li>\n<li>rstrip</li>\n<li>strip</li>\n<li>rfind</li>\n<li>rindex</li>\n<li>partition</li>\n<li>rpartition</li>\n<li>splitlines</li>\n<li>isalpha</li>\n<li>isdigit</li>\n<li>isalnum</li>\n<li>isspace</li>\n<li>join</li>\n</ol>\n","categories":["Python 学习之旅"],"tags":["Python"]},{"title":"Mark使用教程","url":"http://yoursite.com/2017/03/09/Markdown教程/","content":"<p>记录学习Markdown学习过程</p>\n<h1 id=\"一、Markdown基本语法\"><a href=\"#一、Markdown基本语法\" class=\"headerlink\" title=\"一、Markdown基本语法\"></a>一、Markdown基本语法</h1><h2 id=\"1-1-段落与换行\"><a href=\"#1-1-段落与换行\" class=\"headerlink\" title=\"1.1 段落与换行\"></a>1.1 段落与换行</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1、段落的前后必须是空行：空行指的是行内什么都没有，或者只有空白符（空格或制表符）；相邻两行文本，如果中间没有空行 会显示在一行中（换行符被转换为空格）。  </div><div class=\"line\">  </div><div class=\"line\">2、如果需要在段落内加入换行（&lt;br&gt;）：可以在前一行的末尾加入至少两个空格</div><div class=\"line\">然后换行写其它的文字。  </div><div class=\"line\">  </div><div class=\"line\">3、Markdown 中的多数区块都需要在两个空行之间。</div></pre></td></tr></table></figure>\n<h2 id=\"1-2-标题\"><a href=\"#1-2-标题\" class=\"headerlink\" title=\"1.2 标题\"></a>1.2 标题</h2><p>Markdown 有 Setext 和 atx 两种形式</p>\n<h3 id=\"1-2-1-Setext形式\"><a href=\"#1-2-1-Setext形式\" class=\"headerlink\" title=\"1.2.1 Setext形式\"></a>1.2.1 Setext形式</h3><p>Setext形式是在底部添加-和=，这种标题形式值有两级，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">标题-</div><div class=\"line\">=====</div><div class=\"line\">标题二</div><div class=\"line\">-----</div></pre></td></tr></table></figure></p>\n<p>其中对-和=的数量不做限制。</p>\n<h3 id=\"1-2-2-atx形式\"><a href=\"#1-2-2-atx形式\" class=\"headerlink\" title=\"1.2.2 atx形式\"></a>1.2.2 atx形式</h3><p>Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 级标题，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 这是 H1</div><div class=\"line\">### 这是 H3</div><div class=\"line\">###### 这是H6</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-3-引用\"><a href=\"#1-3-引用\" class=\"headerlink\" title=\"1.3 引用\"></a>1.3 引用</h2><h3 id=\"1-3-1-引用内容\"><a href=\"#1-3-1-引用内容\" class=\"headerlink\" title=\"1.3.1 引用内容\"></a>1.3.1 引用内容</h3><p>可以使用<code>&gt;</code>将内容标记为“引用”的内容，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-2-多行引用\"><a href=\"#1-3-2-多行引用\" class=\"headerlink\" title=\"1.3.2 多行引用\"></a>1.3.2 多行引用</h3><p>可以在每行之前添加 <code>&gt;</code> ，如<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div><div class=\"line\">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class=\"line\">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n</blockquote>\n<p>也可在只在首行添加<code>&gt;</code>,这时连续临近的行都会被当做引用内容，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div><div class=\"line\">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class=\"line\">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n</blockquote>\n<h3 id=\"1-3-2-引用嵌套\"><a href=\"#1-3-2-引用嵌套\" class=\"headerlink\" title=\"1.3.2 引用嵌套\"></a>1.3.2 引用嵌套</h3><p>引用可以多成嵌套，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; This is the first level of quoting.</div><div class=\"line\">&gt; &gt; This is nested blockquote.</div><div class=\"line\">     </div><div class=\"line\">&gt; Back to the first level.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level.</p>\n</blockquote>\n<p>引用的内容内也可以使用其他的 Markdown<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; ## 这是一个标题。</div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 1.   这是第一行列表项。</div><div class=\"line\">&gt; 2.   这是第二行列表项。</div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 给出一些例子代码：</div><div class=\"line\">&gt; </div><div class=\"line\">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-4-列表\"><a href=\"#1-4-列表\" class=\"headerlink\" title=\"1.4 列表\"></a>1.4 列表</h2><p>Markdown 支持无序列表和有序列表。</p>\n<h3 id=\"1-5-1-无序列表\"><a href=\"#1-5-1-无序列表\" class=\"headerlink\" title=\"1.5.1 无序列表\"></a>1.5.1 无序列表</h3><p>无序列表使用<code>*</code>、<code>+</code>或是<code>-</code>作为列表标记：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">*   Red</div><div class=\"line\">*   Green</div><div class=\"line\">*   Blue</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">+   Red</div><div class=\"line\">+   Green</div><div class=\"line\">+   Blue</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">-   Red</div><div class=\"line\">-   Green</div><div class=\"line\">-   Blue</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<h3 id=\"1-4-2-有序列表\"><a href=\"#1-4-2-有序列表\" class=\"headerlink\" title=\"1.4.2 有序列表\"></a>1.4.2 有序列表</h3>有序列表则使用数字接着一个英文句点：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. Bird</div><div class=\"line\">2. McHale</div><div class=\"line\">3. Parish</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>值得一提的是，在有序列表中使用的数字并不会影响输出的 HTML 结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. Bird</div><div class=\"line\">1. McHale</div><div class=\"line\">1. Parish</div></pre></td></tr></table></figure></p>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">8. Bird</div><div class=\"line\">1. McHale</div><div class=\"line\">10. Parish</div></pre></td></tr></table></figure></p>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<h2 id=\"1-5-代码\"><a href=\"#1-5-代码\" class=\"headerlink\" title=\"1.5 代码\"></a>1.5 代码</h2><p>Markdown标记代码有缩进用<code>` </code>符号放在代码前后，或使用 <code>```</code>来包含多行代码</p>\n<h3 id=\"1-5-1-缩进方式\"><a href=\"#1-5-1-缩进方式\" class=\"headerlink\" title=\"1.5.1 缩进方式\"></a>1.5.1 缩进方式</h3><p>代码块前后需要有至少一个空行，且每行代码前需要有至少一个 Tab 或四个空格：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">这是一个普通段落：</div><div class=\"line\"></div><div class=\"line\">    这是一个代码区块。</div><div class=\"line\">     这是一个代码区块。</div><div class=\"line\">     这是一个代码区块。</div><div class=\"line\">这是一个代码区块。</div></pre></td></tr></table></figure></p>\n<p>这是一个普通段落：</p>\n<pre><code>这是一个代码区块。\n 这是一个代码区块。\n 这是一个代码区块。\n</code></pre><p>这是一个代码区块。</p>\n<p>可以注意到缩进方式标记代码，代码行的缩进会被移除，一个代码区块会一直持续到没有缩进的那一行（或是遇到空行）。</p>\n<h3 id=\"1-5-2-使用-符号放在代码前后\"><a href=\"#1-5-2-使用-符号放在代码前后\" class=\"headerlink\" title=\"1.5.2 使用 ` 符号放在代码前后\"></a>1.5.2 使用 <code>` </code>符号放在代码前后</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">`code`</div></pre></td></tr></table></figure>\n<p><code>code</code><br>如果要在代码区段内插入<code>` </code>，你可以用多个<code>` </code>来开启和结束代码区段：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">``There is a literal backtick (`) here.``</div></pre></td></tr></table></figure></p>\n<p><code>There is a literal backtick (`) here.</code></p>\n<h3 id=\"1-5-3-使用-来包含多行代码\"><a href=\"#1-5-3-使用-来包含多行代码\" class=\"headerlink\" title=\"1.5.3 使用 ``` ``` 来包含多行代码\"></a>1.5.3 使用 ``` ``` 来包含多行代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">```js</div><div class=\"line\">window.addEventListener(&apos;load&apos;, function() &#123;</div><div class=\"line\">  console.log(&apos;window loaded&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">```</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'window loaded'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>注意在第一组 ``` 之后可以添加代码的语言</p>\n<h2 id=\"1-6-分割线\"><a href=\"#1-6-分割线\" class=\"headerlink\" title=\"1.6 分割线\"></a>1.6 分割线</h2><p>可以在一行中使用三个或更多的 *、- 或 _ 来添加分隔线<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">***</div></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">___</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">---</div></pre></td></tr></table></figure>\n<hr>\n<p>多个字符之间可以有空格（空白符），但不能有其他字符.</p>\n<h2 id=\"1-7-超链接\"><a href=\"#1-7-超链接\" class=\"headerlink\" title=\"1.7 超链接\"></a>1.7 超链接</h2><p>Markdown中实现超链接有3中：行内式、参考式和自动连接</p>\n<h3 id=\"1-7-1-行内式\"><a href=\"#1-7-1-行内式\" class=\"headerlink\" title=\"1.7.1 行内式\"></a>1.7.1 行内式</h3><p>行内式格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[link text](URL &apos;title&apos;)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">This is an [example](http://example.com/ &quot;Title&quot;) inline link.</div><div class=\"line\">This [link](http://example.net/) has no title attribute.</div></pre></td></tr></table></figure>\n<p>This is an <a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"external\">example</a> inline link.<br>This <a href=\"http://example.net/\" target=\"_blank\" rel=\"external\">link</a> has no title attribute.</p>\n<blockquote>\n<p>注：如果带有’title’,鼠标移到超链接上，会显示title内容</p>\n</blockquote>\n<p>假如是指向本地的连接：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[icon.png](./images/icon.png)</div></pre></td></tr></table></figure></p>\n<p><a href=\"./images/icon.png\">icon.png</a></p>\n<h3 id=\"1-7-2-参考式\"><a href=\"#1-7-2-参考式\" class=\"headerlink\" title=\"1.7.2 参考式\"></a>1.7.2 参考式</h3><p>参考式链接的写法相当于行内式拆分成两部分，并通过一个 识别符 来连接两部分。参考式能尽量保持文章结构的简单，也方便统一管理 URL。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">定义超链接：[Google][link]</div><div class=\"line\">定义链接内容：[link]: url &quot;title&quot;</div><div class=\"line\">例如：</div><div class=\"line\">This is [an example] [id] reference-style link.</div><div class=\"line\">[id]: http://example.com/  &quot;title&quot;</div></pre></td></tr></table></figure></p>\n<p>This is <a href=\"http://example.com/\" title=\"title\" target=\"_blank\" rel=\"external\">an example</a> reference-style link.</p>\n<blockquote>\n<p>注：<br>a. 链接的定义可以放在文件中的任何一个地方<br>b. 下面三种方式相同<br><code>[id]: http://example.com/  &quot;title&quot;</code><br><code>[id]: http://example.com/  &#39;title&#39;</code><br><code>[id]: http://example.com/  (title)</code></p>\n</blockquote>\n<p>下面这种省略方式可以<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[Google][]</div><div class=\"line\">[Google]: http://www.google.com/ &quot;Google&quot;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.google.com/\" title=\"Google\" target=\"_blank\" rel=\"external\">Google</a></p>\n<p>下面给一个参考式范例<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">I get 10 times more traffic from [Google] [1] than from</div><div class=\"line\">[Yahoo] [2] or [MSN] [3].</div><div class=\"line\"></div><div class=\"line\">  [1]: http://google.com/        &quot;Google&quot;</div><div class=\"line\">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</div><div class=\"line\">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</div></pre></td></tr></table></figure></p>\n<p>1.7.3 自动链接<br>使用 &lt;&gt; 包括的 URL 或邮箱地址会被自动转换为超链接：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;http://www.google.com/&gt;</div><div class=\"line\">&lt;123@email.com&gt;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.google.com/\" target=\"_blank\" rel=\"external\">http://www.google.com/</a><br><a href=\"&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x31;&#x32;&#51;&#64;&#x65;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;\">&#x31;&#x32;&#51;&#64;&#x65;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>\n<h2 id=\"1-8-图像\"><a href=\"#1-8-图像\" class=\"headerlink\" title=\"1.8 图像\"></a>1.8 图像</h2><p>插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个 !。也分为行内式和参考式两种。</p>\n<h3 id=\"1-8-1-行内式\"><a href=\"#1-8-1-行内式\" class=\"headerlink\" title=\"1.8.1 行内式\"></a>1.8.1 行内式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">![CocoaCao](http://cocoacao.github.io/images/avatar.jpg &quot;CocoaCao&quot;)</div></pre></td></tr></table></figure>\n<p><img src=\"http://cocoacao.github.io/images/avatar.jpg\" alt=\"CocoaCao\" title=\"CocoaCao\"></p>\n<p>假如是引用本地图片：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">![icon.png](../../../../icon.png)</div></pre></td></tr></table></figure></p>\n<p><img src=\"../../../../icon.png\" alt=\"icon.png\"></p>\n<h3 id=\"1-8-2-参考式\"><a href=\"#1-8-2-参考式\" class=\"headerlink\" title=\"1.8.2 参考式\"></a>1.8.2 参考式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">![CocoaCao][image]</div><div class=\"line\">[image]: http://cocoacao.github.io/images/avatar.jpg &quot;CocoaCao&quot;</div></pre></td></tr></table></figure>\n<p><img src=\"http://cocoacao.github.io/images/avatar.jpg\" alt=\"CocoaCao\" title=\"CocoaCao\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">![cocoacao][]</div><div class=\"line\">[image]: http://cocoacao.github.io/images/avatar.jpg &quot;CocoaCao&quot;</div></pre></td></tr></table></figure>\n<p><img src=\"http://cocoacao.github.io/images/avatar.jpg\" alt=\"cocoacao\" title=\"CocoaCao\"></p>\n<h3 id=\"1-8-3-指定图片的显示大小\"><a href=\"#1-8-3-指定图片的显示大小\" class=\"headerlink\" title=\"1.8.3 指定图片的显示大小\"></a>1.8.3 指定图片的显示大小</h3><p>Markdown 不支持指定图片的显示大小，可通过直接插入<code>&lt;img /&gt;</code>标签来指定相关属性<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;http://cocoacao.github.io/images/avatar.jpg&quot; alt=&quot;CocoaCao&quot; title=&quot;CocoaCao&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://cocoacao.github.io/images/avatar.jpg\" alt=\"CocoaCao\" title=\"CocoaCao\" width=\"50\" height=\"50\"></p>\n<h2 id=\"1-9-强调\"><a href=\"#1-9-强调\" class=\"headerlink\" title=\"1.9 强调\"></a>1.9 强调</h2><h3 id=\"1-9-1-斜体\"><a href=\"#1-9-1-斜体\" class=\"headerlink\" title=\"1.9.1 斜体\"></a>1.9.1 斜体</h3><p>斜体可以用·*· 或 ·_·包括起来<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">这是用来 *斜体* 的 _文本_</div></pre></td></tr></table></figure></p>\n<p>这是用来 斜体* 的 <em>文本</em></p>\n<blockquote>\n<p>如果 <code>*</code> 和 <code>_</code> 两边都有空白,它们会被当成普通的符号，<br>*  this text is surrounded by literal asterisks  *</p>\n</blockquote>\n<ul>\n<li>this text is surrounded by literal asterisks *</li>\n</ul>\n<blockquote>\n<p>文字前后直接插入普通的<code>*</code>或<code>_</code>，用反斜线：<br>\\*this text is surrounded by literal asterisks\\*</p>\n</blockquote>\n<p>*this text is surrounded by literal asterisks*</p>\n<h3 id=\"1-9-2-加粗\"><a href=\"#1-9-2-加粗\" class=\"headerlink\" title=\"1.9.2 加粗\"></a>1.9.2 加粗</h3><p>使用 <strong> </strong> 或 <strong> </strong> 包括的文本会被加粗<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">这是用来 **加粗** 的 __文本__</div></pre></td></tr></table></figure></p>\n<p>这是用来 <strong>加粗</strong> 的 <strong>文本</strong></p>\n<h2 id=\"1-10-字符转义\"><a href=\"#1-10-字符转义\" class=\"headerlink\" title=\"1.10 字符转义\"></a>1.10 字符转义</h2><p>Markdown 支持以下这些符号前面加上<code>\\</code>来帮助插入普通的符号：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">这是用来 *演示* 的 _文本_</div><div class=\"line\"></div><div class=\"line\">这是用来 \\*演示\\* 的 \\_文本\\_</div></pre></td></tr></table></figure></p>\n<p>这是用来 <em>演示</em> 的 <em>文本</em></p>\n<p>这是用来 *演示* 的 _文本_</p>\n<p>Markdown中特殊字符包括：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">\\</div><div class=\"line\">`</div><div class=\"line\">*</div><div class=\"line\">_</div><div class=\"line\">&#123;&#125;</div><div class=\"line\">[]</div><div class=\"line\">()</div><div class=\"line\">#</div><div class=\"line\">+</div><div class=\"line\">-</div><div class=\"line\">.</div><div class=\"line\">!</div></pre></td></tr></table></figure></p>\n<h1 id=\"二、扩展语法\"><a href=\"#二、扩展语法\" class=\"headerlink\" title=\"二、扩展语法\"></a>二、扩展语法</h1><p>kjsk;df</p>\n<h2 id=\"2-1-删除线\"><a href=\"#2-1-删除线\" class=\"headerlink\" title=\"2.1 删除线\"></a>2.1 删除线</h2><p>删除线可以用<code>~~~内容~~~</code><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">这就是 ~~删除线~~</div></pre></td></tr></table></figure></p>\n<p>这就是 <del>删除线</del></p>\n<h2 id=\"2-2-表格\"><a href=\"#2-2-表格\" class=\"headerlink\" title=\"2.2 表格\"></a>2.2 表格</h2><h3 id=\"2-2-1-单元格和表头\"><a href=\"#2-2-1-单元格和表头\" class=\"headerlink\" title=\"2.2.1 单元格和表头\"></a>2.2.1 单元格和表头</h3><p>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">name | age</div><div class=\"line\">---- | ---</div><div class=\"line\">LearnShare | 12</div><div class=\"line\">Mike |  32</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LearnShare</td>\n<td>12</td>\n</tr>\n<tr>\n<td>Mike</td>\n<td>32</td>\n</tr>\n</tbody>\n</table>\n<p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LearnShare</td>\n<td>12</td>\n</tr>\n<tr>\n<td>Mike</td>\n<td>32</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>为了使 Markdown 更清晰，<code>|</code>和<code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的<code>|</code>外就不需要了）。</p>\n</blockquote>\n<h3 id=\"2-2-2-对齐\"><a href=\"#2-2-2-对齐\" class=\"headerlink\" title=\"2.2.2 对齐\"></a>2.2.2 对齐</h3><p>在表头下方的分隔线标记中加入 :，即可标记下方单元格内容的对齐方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">:--- 代表左对齐</div><div class=\"line\">:--: 代表居中对齐</div><div class=\"line\">---: 代表右对齐</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">| left | center | right |</div><div class=\"line\">| :--- | :----: | ----: |</div><div class=\"line\">| aaaa | bbbbbb | ccccc |</div><div class=\"line\">| a    | b      | c     |</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">left</th>\n<th style=\"text-align:center\">center</th>\n<th style=\"text-align:right\">right</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">aaaa</td>\n<td style=\"text-align:center\">bbbbbb</td>\n<td style=\"text-align:right\">ccccc</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:right\">c</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-2-3-插入其他内容\"><a href=\"#2-2-3-插入其他内容\" class=\"headerlink\" title=\"2.2.3 插入其他内容\"></a>2.2.3 插入其他内容</h3><p>表格中可以插入其他 Markdown 中的行内标记：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n<th>blog</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>CocoaCao</em></td>\n<td>12</td>\n<td><a href=\"https://cocoacao.github.io\" title=\"cococacao\" target=\"_blank\" rel=\"external\">CocoaCao</a></td>\n</tr>\n<tr>\n<td><strong>简书</strong></td>\n<td>32</td>\n<td><a href=\"https://jianshu.com\" title=\"简书\" target=\"_blank\" rel=\"external\">简书</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>参考：<br><a href=\"http://xianbai.me/learn-md/index.html\" target=\"_blank\" rel=\"external\">Learning-Markdown (Markdown 入门参考)</a><br><a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版)</a></p>\n","categories":["Markdown"],"tags":["Markdown"]},{"title":"Hexo 常用命令","url":"http://yoursite.com/2017/03/06/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":["hexo"],"tags":[]},{"title":"404","url":"http://yoursite.com/404.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"关于","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/bg.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}","categories":[],"tags":[]},{"title":"友链","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"项目","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"搜索","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]